// <auto-generated />
using System;
using HandmadeByDoniApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HandmadeByDoniApp.Data.Migrations
{
    [DbContext(typeof(HandmadeByDoniAppDbContext))]
    [Migration("20240613052213_dataSeed")]
    partial class dataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.Property<Guid>("ApplicationUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUsersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ApplicationUserProduct");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("DeliveryCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("MethodPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryCompanyId");

                    b.HasIndex("MethodPaymentId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("80255d94-aefe-4c1d-abb6-715604db71b0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "523d2c69-b025-49e2-b98b-5d6740549418",
                            Email = "admin@handmadebydoni.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HANDMADEBYDONI.BG",
                            NormalizedUserName = "ADMIN@HANDMADEBYDONI.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAELMrwT64nFyLNC88INmnWutNZLQ+Ruttob+MXO8e7v16LivXJqlCw6Cd/YqsXZybOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ZLCGPEWE3P3BDNVK526PG2IX6B6N6N44",
                            TwoFactorEnabled = false,
                            UserName = "admin@handmadebydoni.bg"
                        },
                        new
                        {
                            Id = new Guid("c5ae3631-31a1-4369-9f2e-8eec685c98eb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc3f7fbb-f77e-40b3-aeaa-8cc9d75245ea",
                            Email = "Rali@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ralka",
                            LastName = "Slavova",
                            LockoutEnabled = false,
                            NormalizedEmail = "RALI@GMAIL.COM",
                            NormalizedUserName = "RALI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/29tUl14LuNDNKs2JSA93S+wtsKC0XcJJI5l8ln94XnAvRlaQtVViY3dLJVxTbxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7HKI4MSRKJKX2DDLAGLVXU7UGKIJVNIR",
                            TwoFactorEnabled = false,
                            UserName = "Rali@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("371900a3-a5d5-422d-815d-c1d9228c11d0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fee1acc-b827-4cb4-a53a-bfbade046f31",
                            Email = "boris@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bobi",
                            LastName = "Borisov",
                            LockoutEnabled = false,
                            NormalizedEmail = "BORIS@GMAIL.COM",
                            NormalizedUserName = "BORIS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL800nBQZUqWxbftoy9X0B+9SfsQGfFu7GKZr6wwvUfhzJLC4T5fk4VCYGusaLmzKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37DLJDOBTDVEYX7UIRMCHQ47DPPW5C3I",
                            TwoFactorEnabled = false,
                            UserName = "boris@gmail.com"
                        });
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wine glass"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Beer glass"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cognac glass"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Whiskey glass"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tea cup"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Champagne glass"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Decanter"
                        });
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.DeliveryCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Econt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Speedy"
                        });
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.MethodPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("MethodPayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Method = "Cash payment on delivery"
                        },
                        new
                        {
                            Id = 2,
                            Method = "Card payment on delivery"
                        });
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b07a00d-9963-4074-8785-2ded25faca31"),
                            CategoryId = 2,
                            CreatedOn = new DateTime(2024, 3, 18, 10, 55, 1, 846, DateTimeKind.Unspecified).AddTicks(6667),
                            Description = "Beer glass The Queen 1 glass",
                            ImageUrl = "https://vxvxeblefmgvrvtnjuha.supabase.co/storage/v1/object/public/image/IMG_20210410_213051%20(Copy).jpg",
                            IsActive = true,
                            Price = 70.00m,
                            Title = "The Queen"
                        },
                        new
                        {
                            Id = new Guid("62848c82-cf7b-4367-adce-6779103e87f6"),
                            CategoryId = 1,
                            CreatedOn = new DateTime(2024, 3, 27, 12, 41, 56, 143, DateTimeKind.Unspecified).AddTicks(3333),
                            Description = "Royal Power 1 cup",
                            ImageUrl = "https://vxvxeblefmgvrvtnjuha.supabase.co/storage/v1/object/public/image/IMG_20211204_153642%20(Copy).jpg",
                            IsActive = false,
                            Price = 65.00m,
                            Title = "Royal Power"
                        },
                        new
                        {
                            Id = new Guid("c8198bc1-2a95-460f-a56a-711042a71f19"),
                            CategoryId = 1,
                            CreatedOn = new DateTime(2024, 3, 18, 17, 49, 43, 330, DateTimeKind.Unspecified),
                            Description = "Mermaid 1 cup",
                            ImageUrl = "https://vxvxeblefmgvrvtnjuha.supabase.co/storage/v1/object/public/image/IMG_20211204_153938%20(Copy).jpg",
                            IsActive = true,
                            Price = 65.00m,
                            Title = "Mermaid"
                        },
                        new
                        {
                            Id = new Guid("1f311aed-e45a-4499-9a99-937503eac6fb"),
                            CategoryId = 1,
                            CreatedOn = new DateTime(2024, 3, 18, 18, 3, 29, 246, DateTimeKind.Unspecified).AddTicks(6667),
                            Description = "Firebird 1 cup",
                            ImageUrl = "https://vxvxeblefmgvrvtnjuha.supabase.co/storage/v1/object/public/image/IMG_20210410_205953%20(Copy).jpg",
                            IsActive = true,
                            Price = 45m,
                            Title = "Firebird 'Жар птица' "
                        },
                        new
                        {
                            Id = new Guid("2d249ad1-fcf5-431e-9dbe-9e18a101ba8e"),
                            CategoryId = 1,
                            CreatedOn = new DateTime(2024, 3, 15, 21, 27, 18, 790, DateTimeKind.Unspecified),
                            Description = "The Madonna and Child 1 cup",
                            ImageUrl = "https://vxvxeblefmgvrvtnjuha.supabase.co/storage/v1/object/public/image/IMG_20231218_162414%20().jpg",
                            IsActive = true,
                            Price = 67m,
                            Title = "The Madonna and Child' "
                        });
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.UserOrder", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreaateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("UserId", "OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderId");

                    b.ToTable("UsersOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Address", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.DeliveryCompany", "DeliveryCompany")
                        .WithMany()
                        .HasForeignKey("DeliveryCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.MethodPayment", "MethodPayment")
                        .WithMany()
                        .HasForeignKey("MethodPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryCompany");

                    b.Navigation("MethodPayment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Comment", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.Comment", "OnComment")
                        .WithMany("Comments")
                        .HasForeignKey("CommentId");

                    b.HasOne("HandmadeByDoniApp.Data.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId");

                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnComment");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Order", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Product", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.Navigation("Category");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.UserOrder", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HandmadeByDoniApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Comment", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HandmadeByDoniApp.Data.Models.Product", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
